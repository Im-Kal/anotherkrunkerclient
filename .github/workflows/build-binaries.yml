name: Build packaged binaries

on:
  workflow_dispatch:
    branches: [ main ]
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  release:
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    timeout-minutes: 30

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      # Install Node.js, npm and yarn
      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16
          check-latest: true
          cache: yarn
          cache-dependency-path: yarn.lock
      
      # Install necessary system dependencies to compile on Linux
      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install libc6-dev-i386 gcc-multilib g++-multilib

      # Module caching
      - name: Cache node_modules
        uses: actions/cache@v2
        id: cacheNodeModules
        with:
          path: ${{ github.workspace }}\node_modules
          key: ${{ runner.os }}-node_modules-cache-v2-${{ hashFiles(format('{0}{1}', github.workspace, '\yarn.lock')) }}
          restore-keys: |
            ${{ runner.os }}-node_modules-cache-v2-
      - name: Cache Electron
        uses: actions/cache@v2
        with:
          path: ${{ env.LOCALAPPDATA }}\electron\Cache
          key: ${{ runner.os }}-electron-cache-v2-${{ hashFiles(format('{0}{1}', github.workspace, '\yarn.lock')) }}
      - name: Cache Electron-Builder
        uses: actions/cache@v2
        with:
          path: ${{ env.LOCALAPPDATA }}\electron-builder\cache
          key: ${{ runner.os }}-electron-builder-cache-v2-${{ hashFiles(format('{0}{1}', github.workspace, '\yarn.lock')) }}

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

          # package.json script to call before electron-builder compiles
          build_script_name: 'bundle:github'

          # If the commit is tagged with a version (e.g. 'v1.0.0'), release the app after building
          release: ${{ secrets.force_release == 'true' || startsWith(github.ref, 'refs/tags/v') }}
